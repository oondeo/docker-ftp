#!/bin/bash


#https://help.ubuntu.com/community/vsftpd
HOME=${HOME:-/opt/app-root/src}
userSSHConfPath="$HOME/../etc/sshd_config"
userSSHConfFinalPath="$HOME/../var/sshd_config"
userConfPath="$HOME/../etc/proftpd.conf"
userConfFinalPath="$HOME/../var/proftpd.conf"
userListConfFinalPath="$HOME/../var/custom.passwd"
userGroupListConfFinalPath="$HOME/../var/custom.group"
scoreboardConfFinalPath="$HOME/../var/proftpd.scoreboard"
pidFtpPath="$HOME/../var/proftpd.pid"
userListConfPath="$HOME/../etc/custom.passwd"
userListFinalPath="$HOME/../var/user_list"
groupListConfFinalPath="$HOME/../var/custom.group"
userListInitConfPath="$HOME/../etc/user_list"
sshPasswordConfPath="$HOME/../etc/ssh_password"


function printHelp() {
    echo "Add users as command arguments, STDIN or mounted in $userConfPath"
    echo "Syntax: user:pass[:e][:uid[:gid]]..."
    echo "Use --readme for more information and examples."
}

function printReadme() {
    echo "TIP: Read this in HTML format here: https://github.com/atmoz/sftp"
}

function createUser() {
    IFS=':' read -a param <<< $@
    user="${param[0]}"
    pass="${param[1]}"
    root="${param[2]}"
    salt=$(perl -e "print crypt(\"$pass\", \"salt\"),\"\n\"")

    #echo $* >> $userListConfFinalPath
    echo "$user:$salt:$(id -u):0::$root:/bin/sh" >> $userListConfFinalPath
    echo "$user:x:1:" >> $groupListConfFinalPath

}

function __createUser() {
    IFS=':' read -a param <<< $@
    user="${param[0]}"
    pass="${param[1]}"

    #add users to virtualusers file
    echo $user >> $userListConfFinalPath
    echo $pass >> $userListConfFinalPath

    if [ "$CHROOT" == "yes" ]; then 
        mkdir -p $HOME/$user
    fi

    db5.3_load  -T -t hash -f "$userListConfFinalPath" "${userListConfFinalPath}.db"
    # chmod 600 "${userListConfFinalPath}.db"
    rm $userListConfFinalPath    
}
function _createUser() {
    IFS=':' read -a param <<< $@
    user="${param[0]}"
    pass="${param[1]}"

    if [ "${param[2]}" == "e" ]; then
        chpasswdOptions="-e"
        uid="${param[3]}"
        gid="${param[4]}"
    else
        uid="${param[2]}"
        gid="${param[3]}"
    fi

    if [ -z "$user" ]; then
        echo "FATAL: You must at least provide a username."
        exit 1
    fi

    if $(cat /etc/passwd | cut -d: -f1 | grep -q "$user"); then
        echo "FATAL: User \"$user\" already exists."
        exit 2
    fi

    useraddOptions=" -D "

    if [ -n "$uid" ]; then
        useraddOptions="$useraddOptions -u $uid"
    fi

    if [ -n "$gid" ]; then
        if ! $(cat /etc/group | cut -d: -f3 | grep -q "$gid"); then
            addgroup -g $gid $gid
        fi

        useraddOptions="$useraddOptions -G $gid"
    fi

    echo $user >> $userListConfFinalPath
    adduser $useraddOptions $user
    mkdir -p /home/$user
    chown $user:root /home/$user
    chmod 755 /home/$user

    if [ -z "$pass" ]; then
        pass="$(tr -dc A-Za-z0-9 </dev/urandom | head -c256)"
        chpasswdOptions=""
    fi

    echo "$user:$pass" | chpasswd $chpasswdOptions

    # Add SSH keys to authorized_keys with valid permissions
    if [ -d /home/$user/.ssh/keys ]; then
        cat /home/$user/.ssh/keys/* >> /home/$user/.ssh/authorized_keys
        chown $user /home/$user/.ssh/authorized_keys
        chmod 600 /home/$user/.ssh/authorized_keys
    fi


}

if [[ $1 =~ ^--help$|^-h$ ]]; then
    printHelp
    exit 0
fi

if [ "$1" == "--readme" ]; then
    printReadme
    exit 0
fi

ftpcommand="ForceCommand /usr/lib/ssh/sftp-server"

# if [ "$1" == "" ]; then
    #No parameters SSH Mode
    if [ -e "$userSSHConfPath" ]; then
        cat "$userSSHConfPath" | grep -v -e '^$' > $userSSHConfFinalPath
    else 
        cat "/etc/ssh/sshd_config" | grep -v -e '^$' > $userSSHConfFinalPath
    fi        
    sed -i "s/Port 10022/Port $SSH_PORT/" $userSSHConfFinalPath || true
    if [ ! -e ${HOME}/../etc/ssh/ssh_host_rsa_key ]; then
        ssh-keygen -t rsa -N "" -f ${HOME}/../etc/ssh/ssh_host_rsa_key
    fi 
    if [ ! -e ${HOME}/../etc/ssh/authorized_keys ]; then
        if [ "$SSH_KEY" == "" ]; then
            ssh-keygen -t rsa -N "" -f ${HOME}/../etc/ssh/id_rsa
            cp ${HOME}/../etc/ssh/id_rsa.pub ${HOME}/../etc/ssh/authorized_keys
        else    
            echo "$SSH_KEY" > ${HOME}/../etc/ssh/authorized_keys
        fi
        chmod 700 ${HOME}/../etc/ssh
        chmod 600 ${HOME}/../etc/ssh/authorized_keys    

    fi
    if [ -e $sshPasswordConfPath ]
    then
        SSH_PASSWORD="$(cat $sshPasswordConfPath)"
    fi
    #cp /etc/shadow /tmp/shadow
    if [ -w /etc/shadow ]
    then
    sed '/^default\:/d' /etc/shadow > /tmp/shadow
    cat /tmp/shadow > /etc/shadow
    rm /tmp/shadow
    if [ ! -z $SSH_PASSWORD ]
    then 
        salt=$(perl -e "print crypt(\"$SSH_PASSWORD\", \"salt\"),\"\n\"")
        echo "${USER_NAME:-default}:$salt::0:::::" >> /etc/shadow
    else
        echo "${USER_NAME:-default}:*::0:::::" >> /etc/shadow
    fi
    fi
    #Non openshift init
    cp /etc/passwd /tmp/passwd
    sed -i 's/^1001\:/default:/' /tmp/passwd
    cat /tmp/passwd > /etc/passwd
    rm -f /tmp/passwd
  
# else
# Create users only on first run
#if [ ! -e "$userConfFinalPath" ]; then
    
    echo "Configuring FTP"
    #python -c "import crypt; print crypt.crypt('joske')"
    # Append mounted config to final config
    if [ -e "$userConfPath" ]; then
        cat "$userConfPath" | grep -v -e '^$' > "$userConfFinalPath"
    else
        cp /etc/proftpd.conf "$userConfFinalPath"
 
        echo "User ${USER_NAME:-default}" >> "$userConfFinalPath"
        echo "Group root" >> "$userConfFinalPath"

        echo "ScoreboardFile $scoreboardConfFinalPath" >> "$userConfFinalPath"
        echo "PidFile $pidFtpPath" >> "$userConfFinalPath"

        echo "AuthUserFile $userListConfFinalPath" >> "$userConfFinalPath"
        echo "AuthGroupFile $userGroupListConfFinalPath" >> "$userConfFinalPath"
        #echo "USER $(id -u)" >> "$userConfFinalPath"
        if [ "$PASSIVE_PORTS" != "" ]; then
            #PassivePorts 10100 10110
            echo "PassivePorts $(echo $PASSIVE_PORTS | sed -En 's/:/ /p')" >> "$userConfFinalPath"
            # echo "pasv_max_port=$(echo $PASSIVE_PORTS | cut -f2 -d':')" >> "$userConfFinalPath"
            # echo "pasv_min_port=$(echo $PASSIVE_PORTS | cut -f1 -d':')" >> "$userConfFinalPath"
        fi
        if [ "$ADDRESS" != "" ]; then
            #echo "pasv_address=$ADDRESS" >> "$userConfFinalPath"
            echo "MasqueradeAddress	$ADDRESS" >> "$userConfFinalPath"
        fi 
        echo "Port $FTP_PORT" >> "$userConfFinalPath"
        # echo "ftp_data_port=$FTPD_PORT" >> "$userConfFinalPath"
	fi

    if [ ! -e $userListFinalPath ]
    then

    if [ -e $userListInitConfPath ]
    then 
        cp "$userListInitConfPath" "$userListFinalPath"
    fi
    echo "Adding users"
    IFS=',' read -ra ADDR <<< "$USERS"
    for i in "${ADDR[@]}"; do
        echo "$i" >> "$userListFinalPath"
    done
    # Append users from arguments to final config
    for user in "$@"; do    
        # echo $user
        echo "$user" >> "$userListFinalPath"
    done

    # Append users from STDIN to final config
    if [ ! -t 0 ]; then
        while IFS= read -r user || [[ -n "$user" ]]; do
            echo "$user" >> "$userListFinalPath"
        done
    fi

    # Check that we have users in config
    if [ "$(cat "$userListFinalPath" | wc -l)" == 0 ]; then
        echo "FATAL: No users provided!"
        printHelp
        exit 3
    fi

    fi
    # Import users from final conf file
    while IFS= read -r user || [[ -n "$user" ]]; do
        createUser "$user"
    done < "$userListFinalPath"

    chmod 640 $userListConfFinalPath
    chmod 640 $groupListConfFinalPath

    # Generate unique ssh keys for this container
    #ssh-keygen -A || return 1
#fi

# Source custom scripts, if any
# if [ -d /etc/vsftpd/ftp.d ]; then
#     for f in /etc/vsftpd/ftp.d/*; do
#         [ -x "$f" ] && . "$f"
#     done
#     unset f
# fi

# fi